"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/@auth";
exports.ids = ["vendor-chunks/@auth"];
exports.modules = {

/***/ "(rsc)/./node_modules/@auth/supabase-adapter/index.js":
/*!******************************************************!*\
  !*** ./node_modules/@auth/supabase-adapter/index.js ***!
  \******************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   SupabaseAdapter: () => (/* binding */ SupabaseAdapter),\n/* harmony export */   format: () => (/* binding */ format)\n/* harmony export */ });\n/* harmony import */ var _supabase_supabase_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @supabase/supabase-js */ \"(rsc)/./node_modules/@supabase/supabase-js/dist/module/index.js\");\n/**\n * <div style={{display: \"flex\", justifyContent: \"space-between\", alignItems: \"center\", padding: 16}}>\n *  <p>Official <a href=\"https://supabase.com/docs\">Supabase</a> adapter for Auth.js / NextAuth.js.</p>\n *  <a href=\"https://supabase.com/\">\n *   <img style={{display: \"block\"}} src=\"https://authjs.dev/img/adapters/supabase.svg\" width=\"50\"/>\n *  </a>\n * </div>\n *\n * ## Installation\n *\n * ```bash npm2yarn\n * npm install @supabase/supabase-js @auth/supabase-adapter\n * ```\n *\n * @module @auth/supabase-adapter\n */\n\nfunction isDate(date) {\n    return (new Date(date).toString() !== \"Invalid Date\" && !isNaN(Date.parse(date)));\n}\nfunction format(obj) {\n    for (const [key, value] of Object.entries(obj)) {\n        if (value === null) {\n            delete obj[key];\n        }\n        if (isDate(value)) {\n            obj[key] = new Date(value);\n        }\n    }\n    return obj;\n}\nfunction SupabaseAdapter(options) {\n    const { url, secret } = options;\n    const supabase = (0,_supabase_supabase_js__WEBPACK_IMPORTED_MODULE_0__.createClient)(url, secret, {\n        db: { schema: \"next_auth\" },\n        global: { headers: { \"X-Client-Info\": \"@auth/supabase-adapter\" } },\n        auth: { persistSession: false },\n    });\n    return {\n        async createUser(user) {\n            const { data, error } = await supabase\n                .from(\"users\")\n                .insert({\n                ...user,\n                emailVerified: user.emailVerified?.toISOString(),\n            })\n                .select()\n                .single();\n            if (error)\n                throw error;\n            return format(data);\n        },\n        async getUser(id) {\n            const { data, error } = await supabase\n                .from(\"users\")\n                .select()\n                .eq(\"id\", id)\n                .maybeSingle();\n            if (error)\n                throw error;\n            if (!data)\n                return null;\n            return format(data);\n        },\n        async getUserByEmail(email) {\n            const { data, error } = await supabase\n                .from(\"users\")\n                .select()\n                .eq(\"email\", email)\n                .maybeSingle();\n            if (error)\n                throw error;\n            if (!data)\n                return null;\n            return format(data);\n        },\n        async getUserByAccount({ providerAccountId, provider }) {\n            const { data, error } = await supabase\n                .from(\"accounts\")\n                .select(\"users (*)\")\n                .match({ provider, providerAccountId })\n                .maybeSingle();\n            if (error)\n                throw error;\n            if (!data || !data.users)\n                return null;\n            return format(data.users);\n        },\n        async updateUser(user) {\n            const { data, error } = await supabase\n                .from(\"users\")\n                .update({\n                ...user,\n                emailVerified: user.emailVerified?.toISOString(),\n            })\n                .eq(\"id\", user.id)\n                .select()\n                .single();\n            if (error)\n                throw error;\n            return format(data);\n        },\n        async deleteUser(userId) {\n            const { error } = await supabase.from(\"users\").delete().eq(\"id\", userId);\n            if (error)\n                throw error;\n        },\n        async linkAccount(account) {\n            const { error } = await supabase.from(\"accounts\").insert(account);\n            if (error)\n                throw error;\n        },\n        async unlinkAccount({ providerAccountId, provider }) {\n            const { error } = await supabase\n                .from(\"accounts\")\n                .delete()\n                .match({ provider, providerAccountId });\n            if (error)\n                throw error;\n        },\n        async createSession({ sessionToken, userId, expires }) {\n            const { data, error } = await supabase\n                .from(\"sessions\")\n                .insert({ sessionToken, userId, expires: expires.toISOString() })\n                .select()\n                .single();\n            if (error)\n                throw error;\n            return format(data);\n        },\n        async getSessionAndUser(sessionToken) {\n            const { data, error } = await supabase\n                .from(\"sessions\")\n                .select(\"*, users(*)\")\n                .eq(\"sessionToken\", sessionToken)\n                .maybeSingle();\n            if (error)\n                throw error;\n            if (!data)\n                return null;\n            const { users: user, ...session } = data;\n            return {\n                user: format(user),\n                session: format(session),\n            };\n        },\n        async updateSession(session) {\n            const { data, error } = await supabase\n                .from(\"sessions\")\n                .update({\n                ...session,\n                expires: session.expires?.toISOString(),\n            })\n                .eq(\"sessionToken\", session.sessionToken)\n                .select()\n                .single();\n            if (error)\n                throw error;\n            return format(data);\n        },\n        async deleteSession(sessionToken) {\n            const { error } = await supabase\n                .from(\"sessions\")\n                .delete()\n                .eq(\"sessionToken\", sessionToken);\n            if (error)\n                throw error;\n        },\n        async createVerificationToken(token) {\n            const { data, error } = await supabase\n                .from(\"verification_tokens\")\n                .insert({\n                ...token,\n                expires: token.expires.toISOString(),\n            })\n                .select()\n                .single();\n            if (error)\n                throw error;\n            const { id, ...verificationToken } = data;\n            return format(verificationToken);\n        },\n        async useVerificationToken({ identifier, token }) {\n            const { data, error } = await supabase\n                .from(\"verification_tokens\")\n                .delete()\n                .match({ identifier, token })\n                .select()\n                .maybeSingle();\n            if (error)\n                throw error;\n            if (!data)\n                return null;\n            const { id, ...verificationToken } = data;\n            return format(verificationToken);\n        },\n    };\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@auth/supabase-adapter/index.js\n");

/***/ })

};
;